1.
Given an integer x, return true if x is a palindrome, and false otherwise.

Example 1:

Input: x = 121
Output: true
Explanation: 121 reads as 121 from left to right and from right to left.
Example 2:

Input: x = -121
Output: false
Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.
Example 3:

Input: x = 10
Output: false
Explanation: Reads 01 from right to left. Therefore it is not a palindrome.
 
Constraints:

-231 <= x <= 231 - 1
 
Follow up: Could you solve it without converting the integer to a string?

Mode: Easy
Company: Google, Facebook, Amazon, Bloomberg, Adobe

class Solution(object):
    def isPalindrome(self, x):
        if x < 0:
            return False
        reverse = 0
        temporary = x
        while temporary > 0:
            digit = temporary % 10
            reverse = reverse * 10 + digit
            temporary = temporary / 10
        return reverse == x              
       
2.
Write a function that reverses a string. The input string is given as an array of characters s.

You must do this by modifying the input array in-place with O(1) extra memory.

Example 1:

Input: s = ["h","e","l","l","o"]
Output: ["o","l","l","e","h"]

Example 2:

Input: s = ["H","a","n","n","a","h"]
Output: ["h","a","n","n","a","H"]

Mode: Easy
Company: Amazon, Microsoft, Adobe, Facebook, TCS

class Solution:
    def reverseString(self, s: List[str]) -> None:
        left = 0
        right = len(s) - 1
        while left < right:
            s[left], s[right] = s[right], s[left]
            left += 1
            right -= 1
        return s

3.
Given a string s, reverse only all the vowels in the string and return it.

The vowels are 'a', 'e', 'i', 'o', and 'u', and they can appear in both lower and upper cases, more than once.

Example 1:

Input: s = "IceCreAm"

Output: "AceCreIm"

Explanation:

The vowels in s are ['I', 'e', 'e', 'A']. On reversing the vowels, s becomes "AceCreIm".

Example 2:

Input: s = "leetcode"

Output: "leotcede"


Constraints:

1 <= s.length <= 3 * 105
s consist of printable ASCII characters.

Mode: Easy
Company: Bloomberg

class Solution(object):
    def reverseVowels(self, s):
        vowels = set('aeiouAEIOU')
        list1 = list(s)
        left = 0
        right = len(s) - 1
        while left < right:
            if list1[left] not in vowels:
                left = left + 1
            if list1[right] not in vowels:
                right = right - 1
            if list1[left] in vowels and list1[right] in vowels:
                list1[left], list1[right] = list1[right], list1[left]
                left = left + 1
                right = right - 1
        return ''.join(list1)

4.
Given a string s, reverse the string according to the following rules:

All the characters that are not English letters remain in the same position.
All the English letters (lowercase or uppercase) should be reversed.
Return s after reversing it.

 

Example 1:

Input: s = "ab-cd"
Output: "dc-ba"
Example 2:

Input: s = "a-bC-dEf-ghIj"
Output: "j-Ih-gfE-dCba"
Example 3:

Input: s = "Test1ng-Leet=code-Q!"
Output: "Qedo1ct-eeLg=ntse-T!"
 

Constraints:

1 <= s.length <= 100
s consists of characters with ASCII values in the range [33, 122].
s does not contain '\"' or '\\'.

Mode: Easy
Company: Amazon

class Solution(object):
    def reverseOnlyLetters(self, s):
        def isletter(ch):
            return ('A' <= ch <= 'Z') or ('a' <= ch <= 'z')
        list1 = list(s)
        left = 0
        right = len(s) - 1
        while left < right:
            if not isletter(list1[left]):
                left = left + 1
            if not isletter(list1[right]):
                right = right - 1
            if isletter(list1[left]) and isletter(list1[right]):
                list1[left], list1[right] = list1[right], list1[left]
                left = left + 1
                right = right - 1
        return ''.join(list1)

5.
Given a string s, find the first non-repeating character in it and return its index. If it does not exist, return -1.

Example 1:

Input: s = "leetcode"

Output: 0

Explanation:

The character 'l' at index 0 is the first character that does not occur at any other index.

Example 2:

Input: s = "loveleetcode"

Output: 2

Example 3:

Input: s = "aabb"

Output: -1

Mode: Easy
Company: Amazon, Bloomberg, Apple, Microsoft, Oracle

class Solution(object):
    def firstUniqChar(self, s):
        l = []
        for i in s:
            if i not in l:
                l.append(i)
        for i in l:
            if s.count(i) = 1:
                return s.find(i)
        return -1

6.
Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.

Example 1:

Input: haystack = "sadbutsad", needle = "sad"
Output: 0
Explanation: "sad" occurs at index 0 and 6.
The first occurrence is at index 0, so we return 0.
Example 2:

Input: haystack = "leetcode", needle = "leeto"
Output: -1
Explanation: "leeto" did not occur in "leetcode", so we return -1.

Mode: Easy

class Solution(object):
    def strStr(self, haystack, needle):
        if needle == "":
            return 0
        for i in range(len(haystack) + 1 - len(needle)):
            if haystack[i:i+len(needle)] == needle:
                return i
        return -1

7.
Given a string s consisting of words and spaces, return the length of the last word in the string.

A word is a maximal substring consisting of non-space characters only.

Example 1:

Input: s = "Hello World"
Output: 5
Explanation: The last word is "World" with length 5.
Example 2:

Input: s = "   fly me   to   the moon  "
Output: 4
Explanation: The last word is "moon" with length 4.
Example 3:

Input: s = "luffy is still joyboy"
Output: 6
Explanation: The last word is "joyboy" with length 6.

Mode: Easy
Company: Amazon, Microsoft

class Solution(object):
    def lengthOfLastWord(self, s):
            count = 0
            for i in range(len(s) - 1, -1, -1):
                if s[i] != " ":
                    count = count + 1
                elif count > 0:
                    return count
            return count

8.
Given two strings s and t, return true if t is an anagram of s, and false otherwise.

Example 1:

Input: s = "anagram", t = "nagaram"

Output: true

Example 2:

Input: s = "rat", t = "car"

Output: false

Mode: Easy

class Solution(object):
    def isAnagram(self, s, t):
        return Counter(s) == Counter(t)

9.
Given two strings s and t, return true if s is a subsequence of t, or false otherwise.

A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., "ace" is a subsequence of "abcde" while "aec" is not).

Example 1:

Input: s = "abc", t = "ahbgdc"
Output: true
Example 2:

Input: s = "axc", t = "ahbgdc"
Output: false

Mode: Easy
Company: Amazon, Google, Yandex, Adobe

class Solution(object):
    def isSubsequence(self, s, t):
        i = 0 # Pointer for s
        for char in t:
            if i < len(s) and s[i] == char:
                i = i + 1
        return i == len(s)

10.
We define the usage of capitals in a word to be right when one of the following cases holds:

All letters in this word are capitals, like "USA".
All letters in this word are not capitals, like "leetcode".
Only the first letter in this word is capital, like "Google".
Given a string word, return true if the usage of capitals in it is right.

Example 1:

Input: word = "USA"
Output: true
Example 2:

Input: word = "FlaG"
Output: false

Mode: Easy
Company: Google, Amazon

class Solution(object):
    def detectCapitalUse(self, word):
        return (word.istitle() or word.isupper() or word.islower())

11.A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.

Given a string s, return true if it is a palindrome, or false otherwise.

Example 1:

Input: s = "A man, a plan, a canal: Panama"
Output: true
Explanation: "amanaplanacanalpanama" is a palindrome.
Example 2:

Input: s = "race a car"
Output: false
Explanation: "raceacar" is not a palindrome.
Example 3:

Input: s = " "
Output: true
Explanation: s is an empty string "" after removing non-alphanumeric characters.
Since an empty string reads the same forward and backward, it is a palindrome.

Mode: Easy
Company: Facebook, Amazon, Microsoft, Apple, Adobe

class Solution(object):
    def isPalindrome(self, s):
        s = s.lower()
        temp = ""
        for char in s:
            if char.isalnum():
                temp = temp + char
        return temp == temp[::-1]

12.
Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.

You must implement a solution with a linear runtime complexity and use only constant extra space.

Example 1:

Input: nums = [2,2,1]

Output: 1

Example 2:

Input: nums = [4,1,2,1,2]

Output: 4

Example 3:

Input: nums = [1]

Output: 1

Mode: Easy
Company: Amazon, Microsoft, Bloomberg, Google, Adobe

class Solution(object):
    def singleNumber(self, nums):
        s = Counter(nums)
        for i, j in s.items(): # Here, i is word and j is freq.
            if j == 1:
                return i

13.
Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

Example 1:

Input: nums = [3,2,3]
Output: 3
Example 2:

Input: nums = [2,2,1,1,1,2,2]
Output: 2

Mode: Easy

class Solution(object):
    def majorityElement(self, nums):
        temp = Counter(nums)
        n = len(nums)
        for i, j in temp.items():
            if j > n/2:
                return i

14.
Given two strings s and goal, return true if and only if s can become goal after some number of shifts on s.

A shift on s consists of moving the leftmost character of s to the rightmost position.

For example, if s = "abcde", then it will be "bcdea" after one shift.

Example 1:

Input: s = "abcde", goal = "cdeab"
Output: true
Example 2:

Input: s = "abcde", goal = "abced"
Output: false

Mode: Easy

class Solution(object):
    def rotateString(self, s, goal):
        if len(s) == len(goal) and goal in (s + s):
            return True
        else:
            return False

15.
Given a string s, return the string after replacing every uppercase letter with the same lowercase letter.

Example 1:

Input: s = "Hello"
Output: "hello"
Example 2:

Input: s = "here"
Output: "here"
Example 3:

Input: s = "LOVELY"
Output: "lovely"

Mode: Easy

class Solution(object):
    def toLowerCase(self, s):
        return s.lower()

16.
A word is considered valid if:

It contains a minimum of 3 characters.
It contains only digits (0-9), and English letters (uppercase and lowercase).
It includes at least one vowel.
It includes at least one consonant.
You are given a string word.

Return true if word is valid, otherwise, return false.

Notes:

'a', 'e', 'i', 'o', 'u', and their uppercases are vowels.
A consonant is an English letter that is not a vowel.

Example 1:

Input: word = "234Adas"

Output: true

Explanation:

This word satisfies the conditions.

Example 2:

Input: word = "b3"

Output: false

Explanation:

The length of this word is fewer than 3, and does not have a vowel.

Example 3:

Input: word = "a3$e"

Output: false

Explanation:

This word contains a '$' character and does not have a consonant.

Mode: Easy

class Solution(object):
    def isValid(self, word):
        countv = 0
        countc = 0
        word = list(word)
        lenn = len(word)
        digits = ['0','1','2','3','4','5','6','7','8','9']
        vowels = ['a','e','i','o','u','A','E','I','O','U']
        
        if lenn < 3:
            return False

        for i in word:
            if i in digits:
                continue # Skip
            elif (65 <= ord(i) <= 90) or (97 <= ord(i) <= 122):
                if i in vowels:
                    countv = countv + 1
                else:
                    countc = countc + 1
            else:
                return False # When it contains special characters like $,%, etc

        if countv >= 1 and countc >= 1:
            return True
        else:
            return False

17.
Given two non-negative integers, num1 and num2 represented as string, return the sum of num1 and num2 as a string.

You must solve the problem without using any built-in library for handling large integers (such as BigInteger). You must also not convert the inputs to integers directly.

Example 1:

Input: num1 = "11", num2 = "123"
Output: "134"
Example 2:

Input: num1 = "456", num2 = "77"
Output: "533"
Example 3:

Input: num1 = "0", num2 = "0"
Output: "0"

Mode: Easy

class Solution(object):
    def addStrings(self, num1, num2):
        int_num1 = int(num1)
        int_num2 = int(num2)

        result = int_num1 + int_num2

        return str(result)

18.
Given two strings s and goal, return true if you can swap two letters in s so the result is equal to goal, otherwise, return false.

Swapping letters is defined as taking two indices i and j (0-indexed) such that i != j and swapping the characters at s[i] and s[j].

For example, swapping at indices 0 and 2 in "abcd" results in "cbad".

Example 1:

Input: s = "ab", goal = "ba"
Output: true
Explanation: You can swap s[0] = 'a' and s[1] = 'b' to get "ba", which is equal to goal.
Example 2:

Input: s = "ab", goal = "ab"
Output: false
Explanation: The only letters you can swap are s[0] = 'a' and s[1] = 'b', which results in "ba" != goal.
Example 3:

Input: s = "aa", goal = "aa"
Output: true
Explanation: You can swap s[0] = 'a' and s[1] = 'a' to get "aa", which is equal to goal.

Mode: Easy

class Solution(object):
    def buddyStrings(self, s, goal):
        if len(s) != len(goal):
            return False

        if s == goal:
            if len(set(s)) < len(s):
                return True
            else: 
                return False

        diff = []
        for i in range(len(s)):
            if s[i] != goal[i]:
                diff.append(i)

        if len(diff) == 2:
            i, j = diff
            return s[i] == goal[j] and s[j] == goal[i]

        return False

19.
Write a function to find the longest common prefix string amongst an array of strings.

If there is no common prefix, return an empty string "".

Example 1:

Input: strs = ["flower","flow","flight"]
Output: "fl"
Example 2:

Input: strs = ["dog","racecar","car"]
Output: ""
Explanation: There is no common prefix among the input strings.

Mode: Easy

class Solution(object):
    def longestCommonPrefix(self, strs):
        prefix = ""
        first_string = strs[0]
        for i in range(len(first_string)):
            char = first_string[i]
            for other_string in strs[1:]:
                if i >= len(other_string) or other_string[i] != char:
                    return prefix
            prefix = prefix + char
        return prefix

20.
Given an integer columnNumber, return its corresponding column title as it appears in an Excel sheet.

For example:

A -> 1
B -> 2
C -> 3
...
Z -> 26
AA -> 27
AB -> 28 
...
 
Example 1:

Input: columnNumber = 1
Output: "A"
Example 2:

Input: columnNumber = 28
Output: "AB"
Example 3:

Input: columnNumber = 701
Output: "ZY"

Mode: Easy

class Solution(object):
    def convertToTitle(self, columnNumber):
        temp = ""
        n = columnNumber
        while n > 0:
            n = n - 1
            rem = n % 26
            temp = temp + chr(ord("A") + rem)
            n = n // 26
        return temp[::-1]

21.
Given an integer num, return a string of its base 7 representation.

Example 1:

Input: num = 100
Output: "202"
Example 2:

Input: num = -7
Output: "-10"

Mode: Easy

class Solution(object):
    def convertToBase7(self, num):
        if num == 0:
            return "0"

        is_negative = num < 0
        if is_negative:
            num = -num

        digits = []
        
        while num > 0:
            rem = num % 7
            digits.append(str(rem))
            num = num // 7
        
        base7 = ''.join(reversed(digits))
        
        if is_negative:
            base7 = '-' + base7
        
        return base7

22.
You are given two strings s and t.

String t is generated by random shuffling string s and then add one more letter at a random position.

Return the letter that was added to t.

Example 1:

Input: s = "abcd", t = "abcde"
Output: "e"
Explanation: 'e' is the letter that was added.
Example 2:

Input: s = "", t = "y"
Output: "y"

Mode: Easy

class Solution(object):
    def findTheDifference(self, s, t):
        sum_s = 0
        sum_t = 0
        asc_s = 0
        asc_t = 0
        list_s = list(s)
        list_t = list(t)
        if s == "":
            return t 

        for i in list_s:
            asc_s = asc_s + ord(i)
        for j in list_t:
            asc_t = asc_t + ord(j)

        if asc_s < asc_t:
            return chr(asc_t - asc_s)

23.
Given a string s, return the number of segments in the string.

A segment is defined to be a contiguous sequence of non-space characters.

Example 1:

Input: s = "Hello, my name is John"
Output: 5
Explanation: The five segments are ["Hello,", "my", "name", "is", "John"]
Example 2:

Input: s = "Hello"
Output: 1

Mode: Easy

class Solution(object):
    def countSegments(self, s):
        segments = s.split()
        return len(segments)

24.
Given a sentence that consists of some words separated by a single space, and a searchWord, check if searchWord is a prefix of any word in sentence.

Return the index of the word in sentence (1-indexed) where searchWord is a prefix of this word. If searchWord is a prefix of more than one word, return the index of the first word (minimum index). If there is no such word return -1.

A prefix of a string s is any leading contiguous substring of s.

Example 1:

Input: sentence = "i love eating burger", searchWord = "burg"
Output: 4
Explanation: "burg" is prefix of "burger" which is the 4th word in the sentence.
Example 2:

Input: sentence = "this problem is an easy problem", searchWord = "pro"
Output: 2
Explanation: "pro" is prefix of "problem" which is the 2nd and the 6th word in the sentence, but we return 2 as it's the minimal index.
Example 3:

Input: sentence = "i am tired", searchWord = "you"
Output: -1
Explanation: "you" is not a prefix of any word in the sentence.

Mode: Easy

class Solution(object):
    def isPrefixOfWord(self, sentence, searchWord):
        words = sentence.split()
        for idx, word in enumerate(words): # Loops through each word by keeting a track of their corresponding indexes as idx here
            if word.startswith(searchWord):
                return idx + 1  # 1-based index
        return -1

25.
Given an integer n, add a dot (".") as the thousands separator and return it in string format.

Example 1:

Input: n = 987
Output: "987"
Example 2:

Input: n = 1234
Output: "1.234"

Mode: Easy

class Solution(object):
    def thousandSeparator(self, n):
        sn = str(n)
        res = ""
        count = 0
        for i in range(len(sn) - 1, -1, -1):
            res = res + sn[i]
            count = count + 1
            if count == 3 and i != 0:
                res = res + '.'
                count = 0
        return res[::-1]

26.
Given a string s, reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.

Example 1:

Input: s = "Let's take LeetCode contest"
Output: "s'teL ekat edoCteeL tsetnoc"
Example 2:

Input: s = "Mr Ding"
Output: "rM gniD"

Mode: Easy

class Solution(object):
    def reverseWords(self, s):
        words = s.split()
        reversed_word = []
        for i in words:
            reversed_word.append(i[::-1])
        result = " ".join(reversed_word)
        return result

27.
Given two string arrays word1 and word2, return true if the two arrays represent the same string, and false otherwise.

A string is represented by an array if the array elements concatenated in order forms the string.

Example 1:

Input: word1 = ["ab", "c"], word2 = ["a", "bc"]
Output: true
Explanation:
word1 represents string "ab" + "c" -> "abc"
word2 represents string "a" + "bc" -> "abc"
The strings are the same, so return true.
Example 2:

Input: word1 = ["a", "cb"], word2 = ["ab", "c"]
Output: false
Example 3:

Input: word1  = ["abc", "d", "defg"], word2 = ["abcddefg"]
Output: true

Mode: Easy

class Solution(object):
    def arrayStringsAreEqual(self, word1, word2):
        temp_word1 = ""
        temp_word2 = ""
        for i in word1:
            temp_word1 = temp_word1 + i
        for j in word2:
            temp_word2 = temp_word2 + j
        if temp_word1 == temp_word2:
            return True
        else:
            return False

        # return ''.join(word1) == ''.join(word2)
        # or
        # return "".join(word1) == "".join(word2)
        # or
        # return ''.join([ch for ch in word1]) == ''.join([ch for ch in word2])
        # or 
        # arrayStringsAreEqual = lambda self, w1, w2: ''.join(w1) == ''.join(w2)
