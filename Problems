1.
Given an integer x, return true if x is a palindrome, and false otherwise.

Example 1:

Input: x = 121
Output: true
Explanation: 121 reads as 121 from left to right and from right to left.
Example 2:

Input: x = -121
Output: false
Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.
Example 3:

Input: x = 10
Output: false
Explanation: Reads 01 from right to left. Therefore it is not a palindrome.
 
Constraints:

-231 <= x <= 231 - 1
 
Follow up: Could you solve it without converting the integer to a string?

Mode: Easy
Company: Google, Facebook, Amazon, Bloomberg, Adobe

class Solution(object):
    def isPalindrome(self, x):
        if x < 0:
            return False
        reverse = 0
        temporary = x
        while temporary > 0:
            digit = temporary % 10
            reverse = reverse * 10 + digit
            temporary = temporary / 10
        return reverse == x              
       
2.
Write a function that reverses a string. The input string is given as an array of characters s.

You must do this by modifying the input array in-place with O(1) extra memory.

Example 1:

Input: s = ["h","e","l","l","o"]
Output: ["o","l","l","e","h"]

Example 2:

Input: s = ["H","a","n","n","a","h"]
Output: ["h","a","n","n","a","H"]

Mode: Easy
Company: Amazon, Microsoft, Adobe, Facebook, TCS

class Solution:
    def reverseString(self, s: List[str]) -> None:
        left = 0
        right = len(s) - 1
        while left < right:
            s[left], s[right] = s[right], s[left]
            left += 1
            right -= 1
        return s

3.
Given a string s, reverse only all the vowels in the string and return it.

The vowels are 'a', 'e', 'i', 'o', and 'u', and they can appear in both lower and upper cases, more than once.

Example 1:

Input: s = "IceCreAm"

Output: "AceCreIm"

Explanation:

The vowels in s are ['I', 'e', 'e', 'A']. On reversing the vowels, s becomes "AceCreIm".

Example 2:

Input: s = "leetcode"

Output: "leotcede"


Constraints:

1 <= s.length <= 3 * 105
s consist of printable ASCII characters.

Mode: Easy
Company: Bloomberg

class Solution(object):
    def reverseVowels(self, s):
        vowels = set('aeiouAEIOU')
        list1 = list(s)
        left = 0
        right = len(s) - 1
        while left < right:
            if list1[left] not in vowels:
                left = left + 1
            if list1[right] not in vowels:
                right = right - 1
            if list1[left] in vowels and list1[right] in vowels:
                list1[left], list1[right] = list1[right], list1[left]
                left = left + 1
                right = right - 1
        return ''.join(list1)

4.
Given a string s, reverse the string according to the following rules:

All the characters that are not English letters remain in the same position.
All the English letters (lowercase or uppercase) should be reversed.
Return s after reversing it.

 

Example 1:

Input: s = "ab-cd"
Output: "dc-ba"
Example 2:

Input: s = "a-bC-dEf-ghIj"
Output: "j-Ih-gfE-dCba"
Example 3:

Input: s = "Test1ng-Leet=code-Q!"
Output: "Qedo1ct-eeLg=ntse-T!"
 

Constraints:

1 <= s.length <= 100
s consists of characters with ASCII values in the range [33, 122].
s does not contain '\"' or '\\'.

Mode: Easy
Company: Amazon

class Solution(object):
    def reverseOnlyLetters(self, s):
        def isletter(ch):
            return ('A' <= ch <= 'Z') or ('a' <= ch <= 'z')
        list1 = list(s)
        left = 0
        right = len(s) - 1
        while left < right:
            if not isletter(list1[left]):
                left = left + 1
            if not isletter(list1[right]):
                right = right - 1
            if isletter(list1[left]) and isletter(list1[right]):
                list1[left], list1[right] = list1[right], list1[left]
                left = left + 1
                right = right - 1
        return ''.join(list1)
